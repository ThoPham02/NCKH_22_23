// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: group_supervisor.sql

package db

import (
	"context"
)

const createGroupSupervisor = `-- name: CreateGroupSupervisor :one
INSERT INTO "group_supervisor" (
  "id", "supervisor_id", "role", "group_report_id"
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, supervisor_id, role, group_report_id
`

type CreateGroupSupervisorParams struct {
	ID            int32 `json:"id"`
	SupervisorID  int32 `json:"supervisor_id"`
	Role          int32 `json:"role"`
	GroupReportID int32 `json:"group_report_id"`
}

func (q *Queries) CreateGroupSupervisor(ctx context.Context, arg CreateGroupSupervisorParams) (GroupSupervisor, error) {
	row := q.db.QueryRowContext(ctx, createGroupSupervisor,
		arg.ID,
		arg.SupervisorID,
		arg.Role,
		arg.GroupReportID,
	)
	var i GroupSupervisor
	err := row.Scan(
		&i.ID,
		&i.SupervisorID,
		&i.Role,
		&i.GroupReportID,
	)
	return i, err
}

const deleteGroupSupervisor = `-- name: DeleteGroupSupervisor :exec
DELETE FROM "group_supervisor"
WHERE id = $1
`

func (q *Queries) DeleteGroupSupervisor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGroupSupervisor, id)
	return err
}

const getGroupSupervisor = `-- name: GetGroupSupervisor :one
SELECT id, supervisor_id, role, group_report_id FROM "group_supervisor"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroupSupervisor(ctx context.Context, id int32) (GroupSupervisor, error) {
	row := q.db.QueryRowContext(ctx, getGroupSupervisor, id)
	var i GroupSupervisor
	err := row.Scan(
		&i.ID,
		&i.SupervisorID,
		&i.Role,
		&i.GroupReportID,
	)
	return i, err
}

const listGroupSupervisors = `-- name: ListGroupSupervisors :many
SELECT id, supervisor_id, role, group_report_id FROM "group_supervisor"
`

func (q *Queries) ListGroupSupervisors(ctx context.Context) ([]GroupSupervisor, error) {
	rows, err := q.db.QueryContext(ctx, listGroupSupervisors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupSupervisor{}
	for rows.Next() {
		var i GroupSupervisor
		if err := rows.Scan(
			&i.ID,
			&i.SupervisorID,
			&i.Role,
			&i.GroupReportID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
