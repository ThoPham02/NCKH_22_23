// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: topic_result.sql

package db

import (
	"context"
)

const createTopicResult = `-- name: CreateTopicResult :one
INSERT INTO "topic_result" (
  "id", "score", "comment", "topic_id", "supervisor_id"
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, score, comment, topic_id, supervisor_id
`

type CreateTopicResultParams struct {
	ID           int32   `json:"id"`
	Score        float64 `json:"score"`
	Comment      string  `json:"comment"`
	TopicID      int32   `json:"topic_id"`
	SupervisorID int32   `json:"supervisor_id"`
}

func (q *Queries) CreateTopicResult(ctx context.Context, arg CreateTopicResultParams) (TopicResult, error) {
	row := q.db.QueryRowContext(ctx, createTopicResult,
		arg.ID,
		arg.Score,
		arg.Comment,
		arg.TopicID,
		arg.SupervisorID,
	)
	var i TopicResult
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.Comment,
		&i.TopicID,
		&i.SupervisorID,
	)
	return i, err
}

const deleteTopicResult = `-- name: DeleteTopicResult :exec
DELETE FROM "topic_result"
WHERE id = $1
`

func (q *Queries) DeleteTopicResult(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTopicResult, id)
	return err
}

const getTopicResult = `-- name: GetTopicResult :one
SELECT id, score, comment, topic_id, supervisor_id FROM "topic_result"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTopicResult(ctx context.Context, id int32) (TopicResult, error) {
	row := q.db.QueryRowContext(ctx, getTopicResult, id)
	var i TopicResult
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.Comment,
		&i.TopicID,
		&i.SupervisorID,
	)
	return i, err
}

const listTopicResults = `-- name: ListTopicResults :many
SELECT id, score, comment, topic_id, supervisor_id FROM "topic_result"
`

func (q *Queries) ListTopicResults(ctx context.Context) ([]TopicResult, error) {
	rows, err := q.db.QueryContext(ctx, listTopicResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TopicResult{}
	for rows.Next() {
		var i TopicResult
		if err := rows.Scan(
			&i.ID,
			&i.Score,
			&i.Comment,
			&i.TopicID,
			&i.SupervisorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
