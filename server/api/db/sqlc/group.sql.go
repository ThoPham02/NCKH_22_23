// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: group.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO "group" (
  "id", "name", "conference_id", "faculty_id"
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, conference_id, faculty_id
`

type CreateGroupParams struct {
	ID           int32  `json:"id"`
	Name         string `json:"name"`
	ConferenceID int32  `json:"conference_id"`
	FacultyID    int32  `json:"faculty_id"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup,
		arg.ID,
		arg.Name,
		arg.ConferenceID,
		arg.FacultyID,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ConferenceID,
		&i.FacultyID,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM "group"
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, name, conference_id, faculty_id FROM "group"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int32) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ConferenceID,
		&i.FacultyID,
	)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT id, name, conference_id, faculty_id FROM "group"
ORDER BY "type_account"
`

func (q *Queries) ListGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ConferenceID,
			&i.FacultyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE "group"
  set name = $2,
  conference_id = $3,
  faculty_id = $4
WHERE "id" = $1
`

type UpdateGroupParams struct {
	ID           int32  `json:"id"`
	Name         string `json:"name"`
	ConferenceID int32  `json:"conference_id"`
	FacultyID    int32  `json:"faculty_id"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateGroup,
		arg.ID,
		arg.Name,
		arg.ConferenceID,
		arg.FacultyID,
	)
	return err
}
