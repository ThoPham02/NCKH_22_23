// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: group.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO
    groups (topic_id, lecturer_id, term_id)
VALUES
    ($1, $2, $3) RETURNING id, topic_id, lecturer_id, term_id, created_at, updated_at, deleted_at
`

type CreateGroupParams struct {
	TopicID    int64 `json:"topic_id"`
	LecturerID int64 `json:"lecturer_id"`
	TermID     int64 `json:"term_id"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.TopicID, arg.LecturerID, arg.TermID)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.LecturerID,
		&i.TermID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :one
UPDATE
    groups
SET
    deleted_at = NOW()
WHERE
    id = $1 RETURNING id, topic_id, lecturer_id, term_id, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, deleteGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.LecturerID,
		&i.TermID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getGroup = `-- name: GetGroup :one
SELECT
    id, topic_id, lecturer_id, term_id, created_at, updated_at, deleted_at
FROM
    groups
WHERE
    id = $1
`

func (q *Queries) GetGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.LecturerID,
		&i.TermID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT
    id, topic_id, lecturer_id, term_id, created_at, updated_at, deleted_at
FROM
    groups
ORDER BY id
`

func (q *Queries) ListGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.TopicID,
			&i.LecturerID,
			&i.TermID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE
    groups
SET
    topic_id = $2,
    lecturer_id = $3,
    term_id=$4,
    updated_at = NOW()
WHERE
    id = $1 RETURNING id, topic_id, lecturer_id, term_id, created_at, updated_at, deleted_at
`

type UpdateGroupParams struct {
	ID         int64 `json:"id"`
	TopicID    int64 `json:"topic_id"`
	LecturerID int64 `json:"lecturer_id"`
	TermID     int64 `json:"term_id"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, updateGroup,
		arg.ID,
		arg.TopicID,
		arg.LecturerID,
		arg.TermID,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.LecturerID,
		&i.TermID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
