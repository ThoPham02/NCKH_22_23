// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: topicregistation.sql

package db

import (
	"context"
	"database/sql"
)

const createTopicRegistation = `-- name: CreateTopicRegistation :one
INSERT INTO "topic_registration" (
  name, description, description_url, lecture_id, faculity_id, created_at
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, name, description, description_url, lecture_id, faculity_id, created_at
`

type CreateTopicRegistationParams struct {
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	DescriptionUrl sql.NullString `json:"description_url"`
	LectureID      int64          `json:"lecture_id"`
	FaculityID     sql.NullInt64  `json:"faculity_id"`
	CreatedAt      sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateTopicRegistation(ctx context.Context, arg CreateTopicRegistationParams) (TopicRegistration, error) {
	row := q.db.QueryRowContext(ctx, createTopicRegistation,
		arg.Name,
		arg.Description,
		arg.DescriptionUrl,
		arg.LectureID,
		arg.FaculityID,
		arg.CreatedAt,
	)
	var i TopicRegistration
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DescriptionUrl,
		&i.LectureID,
		&i.FaculityID,
		&i.CreatedAt,
	)
	return i, err
}

const getListTopicRegistation = `-- name: GetListTopicRegistation :many
SELECT id, name, description, description_url, lecture_id, faculity_id, created_at FROM "topic_registration"
WHERE name LIKE $1
`

func (q *Queries) GetListTopicRegistation(ctx context.Context, name string) ([]TopicRegistration, error) {
	rows, err := q.db.QueryContext(ctx, getListTopicRegistation, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TopicRegistration{}
	for rows.Next() {
		var i TopicRegistration
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DescriptionUrl,
			&i.LectureID,
			&i.FaculityID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopicRegistationById = `-- name: GetTopicRegistationById :one
SELECT id, name, description, description_url, lecture_id, faculity_id, created_at FROM "topic_registration"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTopicRegistationById(ctx context.Context, id int64) (TopicRegistration, error) {
	row := q.db.QueryRowContext(ctx, getTopicRegistationById, id)
	var i TopicRegistration
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DescriptionUrl,
		&i.LectureID,
		&i.FaculityID,
		&i.CreatedAt,
	)
	return i, err
}

const getTopicRegistationByLectureId = `-- name: GetTopicRegistationByLectureId :many
SELECT id, name, description, description_url, lecture_id, faculity_id, created_at FROM "topic_registration"
WHERE lecture_id = $1
`

func (q *Queries) GetTopicRegistationByLectureId(ctx context.Context, lectureID int64) ([]TopicRegistration, error) {
	rows, err := q.db.QueryContext(ctx, getTopicRegistationByLectureId, lectureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TopicRegistration{}
	for rows.Next() {
		var i TopicRegistration
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DescriptionUrl,
			&i.LectureID,
			&i.FaculityID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTopicRegistation = `-- name: UpdateTopicRegistation :one
UPDATE "topic_registration"
  set name = $2,
  description =$3,
  description_url = $4,
  lecture_id = $5,
  faculity_id = $6
WHERE id = $1 RETURNING id, name, description, description_url, lecture_id, faculity_id, created_at
`

type UpdateTopicRegistationParams struct {
	ID             int64          `json:"id"`
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	DescriptionUrl sql.NullString `json:"description_url"`
	LectureID      int64          `json:"lecture_id"`
	FaculityID     sql.NullInt64  `json:"faculity_id"`
}

func (q *Queries) UpdateTopicRegistation(ctx context.Context, arg UpdateTopicRegistationParams) (TopicRegistration, error) {
	row := q.db.QueryRowContext(ctx, updateTopicRegistation,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.DescriptionUrl,
		arg.LectureID,
		arg.FaculityID,
	)
	var i TopicRegistration
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DescriptionUrl,
		&i.LectureID,
		&i.FaculityID,
		&i.CreatedAt,
	)
	return i, err
}
