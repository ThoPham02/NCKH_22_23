// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: department.sql

package db

import (
	"context"
)

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO "department" (
  "id", "name", "faculty_id"
) VALUES (
  $1, $2, $3
)
RETURNING id, name, faculty_id
`

type CreateDepartmentParams struct {
	ID        int32  `json:"id"`
	Name      string `json:"name"`
	FacultyID int32  `json:"faculty_id"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, createDepartment, arg.ID, arg.Name, arg.FacultyID)
	var i Department
	err := row.Scan(&i.ID, &i.Name, &i.FacultyID)
	return i, err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
DELETE FROM "department"
WHERE id = $1
`

func (q *Queries) DeleteDepartment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDepartment, id)
	return err
}

const getDepartment = `-- name: GetDepartment :one
SELECT id, name, faculty_id FROM "department"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDepartment(ctx context.Context, id int32) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartment, id)
	var i Department
	err := row.Scan(&i.ID, &i.Name, &i.FacultyID)
	return i, err
}

const listDepartments = `-- name: ListDepartments :many
SELECT id, name, faculty_id FROM "department"
ORDER BY "type_account"
`

func (q *Queries) ListDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, listDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Department{}
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name, &i.FacultyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
