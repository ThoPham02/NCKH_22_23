// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: department.sql

package db

import (
	"context"
)

const getDepartmentByID = `-- name: GetDepartmentByID :one
SELECT id, name, faculity_id FROM "department"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDepartmentByID(ctx context.Context, id int64) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartmentByID, id)
	var i Department
	err := row.Scan(&i.ID, &i.Name, &i.FaculityID)
	return i, err
}

const getListDepartment = `-- name: GetListDepartment :many
SELECT id, name, faculity_id FROM "department"
`

func (q *Queries) GetListDepartment(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getListDepartment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Department{}
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name, &i.FaculityID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListDepartmentByFaculity = `-- name: GetListDepartmentByFaculity :many
SELECT id, name, faculity_id FROM "department"
WHERE faculity_id = $1
`

func (q *Queries) GetListDepartmentByFaculity(ctx context.Context, faculityID int64) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getListDepartmentByFaculity, faculityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Department{}
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name, &i.FaculityID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
