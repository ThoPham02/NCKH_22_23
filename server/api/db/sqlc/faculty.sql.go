// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: faculty.sql

package db

import (
	"context"
)

const createFaculty = `-- name: CreateFaculty :one
INSERT INTO
    faculties (name, user_id)
VALUES
    ($1, $2) RETURNING id, name, user_id, created_at, updated_at, deleted_at
`

type CreateFacultyParams struct {
	Name   string `json:"name"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) CreateFaculty(ctx context.Context, arg CreateFacultyParams) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, createFaculty, arg.Name, arg.UserID)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteFaculty = `-- name: DeleteFaculty :one
UPDATE
    faculties
SET
    deleted_at = NOW()
WHERE
    id = $1 RETURNING id, name, user_id, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteFaculty(ctx context.Context, id int64) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, deleteFaculty, id)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFaculty = `-- name: GetFaculty :one
SELECT
    id, name, user_id, created_at, updated_at, deleted_at
FROM
    faculties
WHERE
    user_id = $1
`

func (q *Queries) GetFaculty(ctx context.Context, userID int64) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, getFaculty, userID)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listFaculties = `-- name: ListFaculties :many
SELECT
    id, name, user_id, created_at, updated_at, deleted_at
FROM
    faculties
`

func (q *Queries) ListFaculties(ctx context.Context) ([]Faculty, error) {
	rows, err := q.db.QueryContext(ctx, listFaculties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Faculty{}
	for rows.Next() {
		var i Faculty
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFaculty = `-- name: UpdateFaculty :one
UPDATE
    faculties
SET
    name = $2,
    updated_at = NOW()
WHERE
    id = $1 RETURNING id, name, user_id, created_at, updated_at, deleted_at
`

type UpdateFacultyParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateFaculty(ctx context.Context, arg UpdateFacultyParams) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, updateFaculty, arg.ID, arg.Name)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
