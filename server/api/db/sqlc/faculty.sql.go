// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: faculty.sql

package db

import (
	"context"
)

const createFaculty = `-- name: CreateFaculty :one
INSERT INTO "faculty" (
  "id", "name"
) VALUES (
  $1, $2
)
RETURNING id, name
`

type CreateFacultyParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateFaculty(ctx context.Context, arg CreateFacultyParams) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, createFaculty, arg.ID, arg.Name)
	var i Faculty
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteFaculty = `-- name: DeleteFaculty :exec
DELETE FROM "faculty"
WHERE id = $1
`

func (q *Queries) DeleteFaculty(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFaculty, id)
	return err
}

const getFaculty = `-- name: GetFaculty :one
SELECT id, name FROM "faculty"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFaculty(ctx context.Context, id int32) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, getFaculty, id)
	var i Faculty
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listFaculties = `-- name: ListFaculties :many
SELECT id, name FROM "faculty"
ORDER BY "name"
`

func (q *Queries) ListFaculties(ctx context.Context) ([]Faculty, error) {
	rows, err := q.db.QueryContext(ctx, listFaculties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Faculty{}
	for rows.Next() {
		var i Faculty
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFaculty = `-- name: UpdateFaculty :exec
UPDATE "faculty"
  set name = $2
WHERE "id" = $1
`

type UpdateFacultyParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateFaculty(ctx context.Context, arg UpdateFacultyParams) error {
	_, err := q.db.ExecContext(ctx, updateFaculty, arg.ID, arg.Name)
	return err
}
