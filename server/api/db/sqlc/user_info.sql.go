// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user_info.sql

package db

import (
	"context"
	"database/sql"
)

const createUserInfo = `-- name: CreateUserInfo :one
INSERT INTO "user_info" (
  "id", "user_id", "name", "email", "phone", "faculty_id", "degree", "year_start", "avata_url", "birthday", "bank_account"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, user_id, name, email, phone, faculty_id, degree, year_start, avata_url, birthday, bank_account
`

type CreateUserInfoParams struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	Name        string         `json:"name"`
	Email       string         `json:"email"`
	Phone       string         `json:"phone"`
	FacultyID   int32          `json:"faculty_id"`
	Degree      int32          `json:"degree"`
	YearStart   int32          `json:"year_start"`
	AvataUrl    sql.NullString `json:"avata_url"`
	Birthday    sql.NullString `json:"birthday"`
	BankAccount sql.NullString `json:"bank_account"`
}

func (q *Queries) CreateUserInfo(ctx context.Context, arg CreateUserInfoParams) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, createUserInfo,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.FacultyID,
		arg.Degree,
		arg.YearStart,
		arg.AvataUrl,
		arg.Birthday,
		arg.BankAccount,
	)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.FacultyID,
		&i.Degree,
		&i.YearStart,
		&i.AvataUrl,
		&i.Birthday,
		&i.BankAccount,
	)
	return i, err
}

const deleteUserInfo = `-- name: DeleteUserInfo :exec
DELETE FROM "user_info"
WHERE id = $1
`

func (q *Queries) DeleteUserInfo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserInfo, id)
	return err
}

const getUserInfo = `-- name: GetUserInfo :one
SELECT id, user_id, name, email, phone, faculty_id, degree, year_start, avata_url, birthday, bank_account FROM "user_info"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserInfo(ctx context.Context, id int32) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, getUserInfo, id)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.FacultyID,
		&i.Degree,
		&i.YearStart,
		&i.AvataUrl,
		&i.Birthday,
		&i.BankAccount,
	)
	return i, err
}

const listUserInfos = `-- name: ListUserInfos :many
SELECT id, user_id, name, email, phone, faculty_id, degree, year_start, avata_url, birthday, bank_account FROM "user_info"
ORDER BY "name"
`

func (q *Queries) ListUserInfos(ctx context.Context) ([]UserInfo, error) {
	rows, err := q.db.QueryContext(ctx, listUserInfos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserInfo{}
	for rows.Next() {
		var i UserInfo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.FacultyID,
			&i.Degree,
			&i.YearStart,
			&i.AvataUrl,
			&i.Birthday,
			&i.BankAccount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
