// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: topic.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTopic = `-- name: CreateTopic :one
INSERT INTO "topic" (
  "id", "name", "lecture_id", "faculty_id", "status", "result_url", "conference_id", "group_id", "time_start", "time_end"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, name, lecture_id, faculty_id, status, result_url, conference_id, group_id, time_start, time_end
`

type CreateTopicParams struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	LectureID    int32          `json:"lecture_id"`
	FacultyID    int32          `json:"faculty_id"`
	Status       int32          `json:"status"`
	ResultUrl    sql.NullString `json:"result_url"`
	ConferenceID int32          `json:"conference_id"`
	GroupID      sql.NullInt32  `json:"group_id"`
	TimeStart    time.Time      `json:"time_start"`
	TimeEnd      time.Time      `json:"time_end"`
}

func (q *Queries) CreateTopic(ctx context.Context, arg CreateTopicParams) (Topic, error) {
	row := q.db.QueryRowContext(ctx, createTopic,
		arg.ID,
		arg.Name,
		arg.LectureID,
		arg.FacultyID,
		arg.Status,
		arg.ResultUrl,
		arg.ConferenceID,
		arg.GroupID,
		arg.TimeStart,
		arg.TimeEnd,
	)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LectureID,
		&i.FacultyID,
		&i.Status,
		&i.ResultUrl,
		&i.ConferenceID,
		&i.GroupID,
		&i.TimeStart,
		&i.TimeEnd,
	)
	return i, err
}

const deleteTopic = `-- name: DeleteTopic :exec
DELETE FROM "topic"
WHERE id = $1
`

func (q *Queries) DeleteTopic(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTopic, id)
	return err
}

const getTopic = `-- name: GetTopic :one
SELECT id, name, lecture_id, faculty_id, status, result_url, conference_id, group_id, time_start, time_end FROM "topic"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTopic(ctx context.Context, id int32) (Topic, error) {
	row := q.db.QueryRowContext(ctx, getTopic, id)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LectureID,
		&i.FacultyID,
		&i.Status,
		&i.ResultUrl,
		&i.ConferenceID,
		&i.GroupID,
		&i.TimeStart,
		&i.TimeEnd,
	)
	return i, err
}

const listTopics = `-- name: ListTopics :many
SELECT id, name, lecture_id, faculty_id, status, result_url, conference_id, group_id, time_start, time_end FROM "topic"
ORDER BY "name"
`

func (q *Queries) ListTopics(ctx context.Context) ([]Topic, error) {
	rows, err := q.db.QueryContext(ctx, listTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LectureID,
			&i.FacultyID,
			&i.Status,
			&i.ResultUrl,
			&i.ConferenceID,
			&i.GroupID,
			&i.TimeStart,
			&i.TimeEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTopic = `-- name: UpdateTopic :exec
UPDATE "topic"
  set name = $2,
  lecture_id = $3,
  faculty_id = $4,
  status = $5,
  result_url = $6,
  conference_id = $7,
  group_id = $8,
  time_start = $9,
  time_end = $10
WHERE id = $1
`

type UpdateTopicParams struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	LectureID    int32          `json:"lecture_id"`
	FacultyID    int32          `json:"faculty_id"`
	Status       int32          `json:"status"`
	ResultUrl    sql.NullString `json:"result_url"`
	ConferenceID int32          `json:"conference_id"`
	GroupID      sql.NullInt32  `json:"group_id"`
	TimeStart    time.Time      `json:"time_start"`
	TimeEnd      time.Time      `json:"time_end"`
}

func (q *Queries) UpdateTopic(ctx context.Context, arg UpdateTopicParams) error {
	_, err := q.db.ExecContext(ctx, updateTopic,
		arg.ID,
		arg.Name,
		arg.LectureID,
		arg.FacultyID,
		arg.Status,
		arg.ResultUrl,
		arg.ConferenceID,
		arg.GroupID,
		arg.TimeStart,
		arg.TimeEnd,
	)
	return err
}
