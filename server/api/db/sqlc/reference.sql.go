// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: reference.sql

package db

import (
	"context"
)

const createReference = `-- name: CreateReference :one
INSERT INTO
    "references" (reference_url, name)
VALUES
    ($1, $2) RETURNING id, reference_url, name, created_at, update_at, deleted_at
`

type CreateReferenceParams struct {
	ReferenceUrl string `json:"reference_url"`
	Name         string `json:"name"`
}

func (q *Queries) CreateReference(ctx context.Context, arg CreateReferenceParams) (Reference, error) {
	row := q.db.QueryRowContext(ctx, createReference, arg.ReferenceUrl, arg.Name)
	var i Reference
	err := row.Scan(
		&i.ID,
		&i.ReferenceUrl,
		&i.Name,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteReference = `-- name: DeleteReference :exec
Update
    "references"
SET
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteReference(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReference, id)
	return err
}

const getReference = `-- name: GetReference :one
SELECT
    id, reference_url, name, created_at, update_at, deleted_at
FROM
    "references"
WHERE
    deleted_at IS NULL
    AND id = $1
`

func (q *Queries) GetReference(ctx context.Context, id int64) (Reference, error) {
	row := q.db.QueryRowContext(ctx, getReference, id)
	var i Reference
	err := row.Scan(
		&i.ID,
		&i.ReferenceUrl,
		&i.Name,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const listReferences = `-- name: ListReferences :many
SELECT
    id, reference_url, name, created_at, update_at, deleted_at
FROM
    "references"
WHERE
    deleted_at IS NULL
ORDER BY
    id
LIMIT $1 OFFSET $2
`

type ListReferencesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReferences(ctx context.Context, arg ListReferencesParams) ([]Reference, error) {
	rows, err := q.db.QueryContext(ctx, listReferences, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reference{}
	for rows.Next() {
		var i Reference
		if err := rows.Scan(
			&i.ID,
			&i.ReferenceUrl,
			&i.Name,
			&i.CreatedAt,
			&i.UpdateAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReference = `-- name: UpdateReference :one
UPDATE
    "references"
SET
    reference_url = $2,
    name = $3
WHERE
    id = $1 RETURNING id, reference_url, name, created_at, update_at, deleted_at
`

type UpdateReferenceParams struct {
	ID           int64  `json:"id"`
	ReferenceUrl string `json:"reference_url"`
	Name         string `json:"name"`
}

func (q *Queries) UpdateReference(ctx context.Context, arg UpdateReferenceParams) (Reference, error) {
	row := q.db.QueryRowContext(ctx, updateReference, arg.ID, arg.ReferenceUrl, arg.Name)
	var i Reference
	err := row.Scan(
		&i.ID,
		&i.ReferenceUrl,
		&i.Name,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}
