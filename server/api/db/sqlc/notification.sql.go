// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: notification.sql

package db

import (
	"context"
	"database/sql"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO "notification" (
  "id", "name", "url"
) VALUES (
  $1, $2, $3
)
RETURNING id, name, url
`

type CreateNotificationParams struct {
	ID   int32          `json:"id"`
	Name string         `json:"name"`
	Url  sql.NullString `json:"url"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.ID, arg.Name, arg.Url)
	var i Notification
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM "notification"
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const getNotification = `-- name: GetNotification :one
SELECT id, name, url FROM "notification"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNotification(ctx context.Context, id int32) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotification, id)
	var i Notification
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const listNotifications = `-- name: ListNotifications :many
SELECT id, name, url FROM "notification"
ORDER BY "name"
`

func (q *Queries) ListNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, listNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotification = `-- name: UpdateNotification :exec
UPDATE "notification"
  set name = $2,
  url = $3
WHERE "id" = $1
`

type UpdateNotificationParams struct {
	ID   int32          `json:"id"`
	Name string         `json:"name"`
	Url  sql.NullString `json:"url"`
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, updateNotification, arg.ID, arg.Name, arg.Url)
	return err
}
