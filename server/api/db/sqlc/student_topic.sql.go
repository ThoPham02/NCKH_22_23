// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: student_topic.sql

package db

import (
	"context"
)

const createStudentTopic = `-- name: CreateStudentTopic :one
INSERT INTO "student_topic" (
  "id", "student_id", "topic_id"
) VALUES (
  $1, $2, $3
)
RETURNING id, student_id, topic_id
`

type CreateStudentTopicParams struct {
	ID        int32 `json:"id"`
	StudentID int32 `json:"student_id"`
	TopicID   int32 `json:"topic_id"`
}

func (q *Queries) CreateStudentTopic(ctx context.Context, arg CreateStudentTopicParams) (StudentTopic, error) {
	row := q.db.QueryRowContext(ctx, createStudentTopic, arg.ID, arg.StudentID, arg.TopicID)
	var i StudentTopic
	err := row.Scan(&i.ID, &i.StudentID, &i.TopicID)
	return i, err
}

const deleteStudentTopic = `-- name: DeleteStudentTopic :exec
DELETE FROM "student_topic"
WHERE id = $1
`

func (q *Queries) DeleteStudentTopic(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudentTopic, id)
	return err
}

const getStudentTopic = `-- name: GetStudentTopic :one
SELECT id, student_id, topic_id FROM "student_topic"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStudentTopic(ctx context.Context, id int32) (StudentTopic, error) {
	row := q.db.QueryRowContext(ctx, getStudentTopic, id)
	var i StudentTopic
	err := row.Scan(&i.ID, &i.StudentID, &i.TopicID)
	return i, err
}

const listStudentTopics = `-- name: ListStudentTopics :many
SELECT id, student_id, topic_id FROM "student_topic"
`

func (q *Queries) ListStudentTopics(ctx context.Context) ([]StudentTopic, error) {
	rows, err := q.db.QueryContext(ctx, listStudentTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentTopic{}
	for rows.Next() {
		var i StudentTopic
		if err := rows.Scan(&i.ID, &i.StudentID, &i.TopicID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentTopic = `-- name: UpdateStudentTopic :exec
UPDATE "student_topic"
  set student_id = $2,
  topic_id = $3
WHERE "id" = $1
`

type UpdateStudentTopicParams struct {
	ID        int32 `json:"id"`
	StudentID int32 `json:"student_id"`
	TopicID   int32 `json:"topic_id"`
}

func (q *Queries) UpdateStudentTopic(ctx context.Context, arg UpdateStudentTopicParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentTopic, arg.ID, arg.StudentID, arg.TopicID)
	return err
}
