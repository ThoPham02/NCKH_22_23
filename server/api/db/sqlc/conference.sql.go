// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: conference.sql

package db

import (
	"context"
	"database/sql"
)

const createConference = `-- name: CreateConference :one
INSERT INTO "conference" (
  "id", "name", "cash_support", "school_year"
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, cash_support, school_year
`

type CreateConferenceParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	CashSupport sql.NullInt32  `json:"cash_support"`
	SchoolYear  sql.NullString `json:"school_year"`
}

func (q *Queries) CreateConference(ctx context.Context, arg CreateConferenceParams) (Conference, error) {
	row := q.db.QueryRowContext(ctx, createConference,
		arg.ID,
		arg.Name,
		arg.CashSupport,
		arg.SchoolYear,
	)
	var i Conference
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CashSupport,
		&i.SchoolYear,
	)
	return i, err
}

const deleteConference = `-- name: DeleteConference :exec
DELETE FROM "conference"
WHERE id = $1
`

func (q *Queries) DeleteConference(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteConference, id)
	return err
}

const getConference = `-- name: GetConference :one
SELECT id, name, cash_support, school_year FROM "conference"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetConference(ctx context.Context, id int32) (Conference, error) {
	row := q.db.QueryRowContext(ctx, getConference, id)
	var i Conference
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CashSupport,
		&i.SchoolYear,
	)
	return i, err
}

const listConferences = `-- name: ListConferences :many
SELECT id, name, cash_support, school_year FROM "conference"
ORDER BY "name"
`

func (q *Queries) ListConferences(ctx context.Context) ([]Conference, error) {
	rows, err := q.db.QueryContext(ctx, listConferences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conference{}
	for rows.Next() {
		var i Conference
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CashSupport,
			&i.SchoolYear,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
