// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: library.sql

package db

import (
	"context"
	"database/sql"
)

const createLibrary = `-- name: CreateLibrary :one
INSERT INTO "library" (
  "id", "name", "url", "owner_id"
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, url, owner_id
`

type CreateLibraryParams struct {
	ID      int32          `json:"id"`
	Name    string         `json:"name"`
	Url     sql.NullString `json:"url"`
	OwnerID int32          `json:"owner_id"`
}

func (q *Queries) CreateLibrary(ctx context.Context, arg CreateLibraryParams) (Library, error) {
	row := q.db.QueryRowContext(ctx, createLibrary,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.OwnerID,
	)
	var i Library
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.OwnerID,
	)
	return i, err
}

const deleteLibrary = `-- name: DeleteLibrary :exec
DELETE FROM "library"
WHERE id = $1
`

func (q *Queries) DeleteLibrary(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLibrary, id)
	return err
}

const getLibrary = `-- name: GetLibrary :one
SELECT id, name, url, owner_id FROM "library"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLibrary(ctx context.Context, id int32) (Library, error) {
	row := q.db.QueryRowContext(ctx, getLibrary, id)
	var i Library
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.OwnerID,
	)
	return i, err
}

const listLibrarys = `-- name: ListLibrarys :many
SELECT id, name, url, owner_id FROM "library"
ORDER BY "name"
`

func (q *Queries) ListLibrarys(ctx context.Context) ([]Library, error) {
	rows, err := q.db.QueryContext(ctx, listLibrarys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Library{}
	for rows.Next() {
		var i Library
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
