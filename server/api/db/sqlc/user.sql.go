// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (
  name, hash_password, type_account_id, email
) VALUES (
  $1, $2, $3, $4
)
`

type CreateUserParams struct {
	Name          string `json:"name"`
	HashPassword  string `json:"hash_password"`
	TypeAccountID int64  `json:"type_account_id"`
	Email         string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.HashPassword,
		arg.TypeAccountID,
		arg.Email,
	)
	return err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, hash_password, type_account_id, email FROM "user"
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashPassword,
		&i.TypeAccountID,
		&i.Email,
	)
	return i, err
}
