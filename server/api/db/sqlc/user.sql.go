// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  "id", "name", "email", "hash_password", "type_account"
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, hash_password, email, type_account
`

type CreateUserParams struct {
	ID           int32  `json:"id"`
	Name         string `json:"name"`
	Email        string `json:"email"`
	HashPassword string `json:"hash_password"`
	TypeAccount  int32  `json:"type_account"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.HashPassword,
		arg.TypeAccount,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashPassword,
		&i.Email,
		&i.TypeAccount,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, hash_password, email, type_account FROM "user"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashPassword,
		&i.Email,
		&i.TypeAccount,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, hash_password, email, type_account FROM "user"
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashPassword,
		&i.Email,
		&i.TypeAccount,
	)
	return i, err
}

const getUserNameByID = `-- name: GetUserNameByID :one
SELECT name FROM "user"
WHERE id = $1
`

func (q *Queries) GetUserNameByID(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserNameByID, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, hash_password, email, type_account FROM "user"
ORDER BY "type_account"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.HashPassword,
			&i.Email,
			&i.TypeAccount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
  set name = $2,
  email = $3,
  hash_password = $4,
  type_account = $5
WHERE id = $1
`

type UpdateUserParams struct {
	ID           int32  `json:"id"`
	Name         string `json:"name"`
	Email        string `json:"email"`
	HashPassword string `json:"hash_password"`
	TypeAccount  int32  `json:"type_account"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.HashPassword,
		arg.TypeAccount,
	)
	return err
}
