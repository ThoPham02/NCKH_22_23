// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: term.sql

package db

import (
	"context"
)

const createTerm = `-- name: CreateTerm :one
INSERT INTO
    terms (
        name
    )
VALUES
    ($1 ) RETURNING id, name, created_at, updated_at, deleted_at
`

func (q *Queries) CreateTerm(ctx context.Context, name string) (Term, error) {
	row := q.db.QueryRowContext(ctx, createTerm, name)
	var i Term
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTerm = `-- name: DeleteTerm :exec
Update
    terms
SET
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteTerm(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTerm, id)
	return err
}

const getTerm = `-- name: GetTerm :one
SELECT
    id, name, created_at, updated_at, deleted_at
FROM
    terms
WHERE
    deleted_at IS NULL
    AND id = $1
`

func (q *Queries) GetTerm(ctx context.Context, id int64) (Term, error) {
	row := q.db.QueryRowContext(ctx, getTerm, id)
	var i Term
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listTerms = `-- name: ListTerms :many
SELECT
    id, name, created_at, updated_at, deleted_at
FROM
    terms
WHERE
    deleted_at IS NULL
`

func (q *Queries) ListTerms(ctx context.Context) ([]Term, error) {
	rows, err := q.db.QueryContext(ctx, listTerms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Term{}
	for rows.Next() {
		var i Term
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTerm = `-- name: UpdateTerm :one
UPDATE
    terms
SET
    name = $2
WHERE
    id = $1 RETURNING id, name, created_at, updated_at, deleted_at
`

type UpdateTermParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTerm(ctx context.Context, arg UpdateTermParams) (Term, error) {
	row := q.db.QueryRowContext(ctx, updateTerm, arg.ID, arg.Name)
	var i Term
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
