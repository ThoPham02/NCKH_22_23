// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: studentGroup.sql

package db

import (
	"context"
)

const createStudentGroup = `-- name: CreateStudentGroup :one
INSERT INTO
    student_groups (
        student_id,
        group_id
    )
VALUES
    ($1, $2 ) RETURNING group_id, student_id
`

type CreateStudentGroupParams struct {
	StudentID int64 `json:"student_id"`
	GroupID   int64 `json:"group_id"`
}

func (q *Queries) CreateStudentGroup(ctx context.Context, arg CreateStudentGroupParams) (StudentGroup, error) {
	row := q.db.QueryRowContext(ctx, createStudentGroup, arg.StudentID, arg.GroupID)
	var i StudentGroup
	err := row.Scan(&i.GroupID, &i.StudentID)
	return i, err
}

const deleteStudentGroup = `-- name: DeleteStudentGroup :exec
DELETE FROM student_groups
WHERE student_id = $2 AND group_id = $1
`

type DeleteStudentGroupParams struct {
	GroupID   int64 `json:"group_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) DeleteStudentGroup(ctx context.Context, arg DeleteStudentGroupParams) error {
	_, err := q.db.ExecContext(ctx, deleteStudentGroup, arg.GroupID, arg.StudentID)
	return err
}

const listStudentGroups = `-- name: ListStudentGroups :many
SELECT
    group_id, student_id
FROM
    student_groups
WHERE
    group_id = $1 AND deleted_at IS NULL
`

func (q *Queries) ListStudentGroups(ctx context.Context, groupID int64) ([]StudentGroup, error) {
	rows, err := q.db.QueryContext(ctx, listStudentGroups, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentGroup{}
	for rows.Next() {
		var i StudentGroup
		if err := rows.Scan(&i.GroupID, &i.StudentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentGroup = `-- name: UpdateStudentGroup :one
UPDATE
    student_groups
SET
    student_id = $2
WHERE
    group_id = $1 RETURNING group_id, student_id
`

type UpdateStudentGroupParams struct {
	GroupID   int64 `json:"group_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) UpdateStudentGroup(ctx context.Context, arg UpdateStudentGroupParams) (StudentGroup, error) {
	row := q.db.QueryRowContext(ctx, updateStudentGroup, arg.GroupID, arg.StudentID)
	var i StudentGroup
	err := row.Scan(&i.GroupID, &i.StudentID)
	return i, err
}
