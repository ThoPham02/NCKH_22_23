// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupTblFieldNames          = builder.RawFieldNames(&GroupTbl{}, true)
	groupTblRows                = strings.Join(groupTblFieldNames, ",")
	groupTblRowsExpectAutoSet   = strings.Join(stringx.Remove(groupTblFieldNames), ",")
	groupTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(groupTblFieldNames, "id"))
)

type (
	groupTblModel interface {
		Insert(ctx context.Context, data *GroupTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GroupTbl, error)
		Update(ctx context.Context, data *GroupTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GroupTbl struct {
		Id             int64 `db:"id"`
		SubcommitteeId int64 `db:"subcommittee_id"`
		LectureId      int64 `db:"lecture_id"`
		Role           int64 `db:"role"`
	}
)

func newGroupTblModel(conn sqlx.SqlConn) *defaultGroupTblModel {
	return &defaultGroupTblModel{
		conn:  conn,
		table: `"public"."group_tbl"`,
	}
}

func (m *defaultGroupTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGroupTblModel) FindOne(ctx context.Context, id int64) (*GroupTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", groupTblRows, m.table)
	var resp GroupTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupTblModel) Insert(ctx context.Context, data *GroupTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, groupTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.SubcommitteeId, data.LectureId, data.Role)
	return ret, err
}

func (m *defaultGroupTblModel) Update(ctx context.Context, data *GroupTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, groupTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.SubcommitteeId, data.LectureId, data.Role)
	return err
}

func (m *defaultGroupTblModel) tableName() string {
	return m.table
}
