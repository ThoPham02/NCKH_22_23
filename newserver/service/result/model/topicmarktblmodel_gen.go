// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	topicMarkTblFieldNames          = builder.RawFieldNames(&TopicMarkTbl{}, true)
	topicMarkTblRows                = strings.Join(topicMarkTblFieldNames, ",")
	topicMarkTblRowsExpectAutoSet   = strings.Join(stringx.Remove(topicMarkTblFieldNames), ",")
	topicMarkTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(topicMarkTblFieldNames, "id"))
)

type (
	topicMarkTblModel interface {
		Insert(ctx context.Context, data *TopicMarkTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TopicMarkTbl, error)
		Update(ctx context.Context, data *TopicMarkTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTopicMarkTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TopicMarkTbl struct {
		Id        int64          `db:"id"`
		TopicId   int64          `db:"topic_id"`
		LectureId int64          `db:"lecture_id"`
		Point     float64        `db:"point"`
		Comment   sql.NullString `db:"comment"`
		Url       sql.NullString `db:"url"`
	}
)

func newTopicMarkTblModel(conn sqlx.SqlConn) *defaultTopicMarkTblModel {
	return &defaultTopicMarkTblModel{
		conn:  conn,
		table: `"public"."topic_mark_tbl"`,
	}
}

func (m *defaultTopicMarkTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTopicMarkTblModel) FindOne(ctx context.Context, id int64) (*TopicMarkTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", topicMarkTblRows, m.table)
	var resp TopicMarkTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicMarkTblModel) Insert(ctx context.Context, data *TopicMarkTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, topicMarkTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.TopicId, data.LectureId, data.Point, data.Comment, data.Url)
	return ret, err
}

func (m *defaultTopicMarkTblModel) Update(ctx context.Context, data *TopicMarkTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, topicMarkTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.TopicId, data.LectureId, data.Point, data.Comment, data.Url)
	return err
}

func (m *defaultTopicMarkTblModel) tableName() string {
	return m.table
}
