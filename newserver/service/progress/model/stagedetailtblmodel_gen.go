// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stageDetailTblFieldNames          = builder.RawFieldNames(&StageDetailTbl{}, true)
	stageDetailTblRows                = strings.Join(stageDetailTblFieldNames, ",")
	stageDetailTblRowsExpectAutoSet   = strings.Join(stringx.Remove(stageDetailTblFieldNames), ",")
	stageDetailTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(stageDetailTblFieldNames, "id"))
)

type (
	stageDetailTblModel interface {
		Insert(ctx context.Context, data *StageDetailTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StageDetailTbl, error)
		Update(ctx context.Context, data *StageDetailTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStageDetailTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StageDetailTbl struct {
		Id           int64          `db:"id"`
		Description  sql.NullString `db:"description"`
		Url          sql.NullString `db:"url"`
		StageId      int64          `db:"stage_id"`
		DepartmentId sql.NullInt64  `db:"department_id"`
		FacultyId    sql.NullInt64  `db:"faculty_id"`
		Time         int64          `db:"time"`
	}
)

func newStageDetailTblModel(conn sqlx.SqlConn) *defaultStageDetailTblModel {
	return &defaultStageDetailTblModel{
		conn:  conn,
		table: `"public"."stage_detail_tbl"`,
	}
}

func (m *defaultStageDetailTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStageDetailTblModel) FindOne(ctx context.Context, id int64) (*StageDetailTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", stageDetailTblRows, m.table)
	var resp StageDetailTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStageDetailTblModel) Insert(ctx context.Context, data *StageDetailTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, stageDetailTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Description, data.Url, data.StageId, data.DepartmentId, data.FacultyId, data.Time)
	return ret, err
}

func (m *defaultStageDetailTblModel) Update(ctx context.Context, data *StageDetailTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, stageDetailTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Description, data.Url, data.StageId, data.DepartmentId, data.FacultyId, data.Time)
	return err
}

func (m *defaultStageDetailTblModel) tableName() string {
	return m.table
}
