// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stageTblFieldNames          = builder.RawFieldNames(&StageTbl{}, true)
	stageTblRows                = strings.Join(stageTblFieldNames, ",")
	stageTblRowsExpectAutoSet   = strings.Join(stringx.Remove(stageTblFieldNames), ",")
	stageTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(stageTblFieldNames, "id"))
)

type (
	stageTblModel interface {
		Insert(ctx context.Context, data *StageTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StageTbl, error)
		Update(ctx context.Context, data *StageTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStageTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StageTbl struct {
		Id          int64          `db:"id"`
		Name        string         `db:"name"`
		Description sql.NullString `db:"description"`
		Url         sql.NullString `db:"url"`
		EventId     int64          `db:"event_id"`
		TimeStart   sql.NullInt64  `db:"time_start"`
		TimeEnd     sql.NullInt64  `db:"time_end"`
	}
)

func newStageTblModel(conn sqlx.SqlConn) *defaultStageTblModel {
	return &defaultStageTblModel{
		conn:  conn,
		table: `"public"."stage_tbl"`,
	}
}

func (m *defaultStageTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStageTblModel) FindOne(ctx context.Context, id int64) (*StageTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", stageTblRows, m.table)
	var resp StageTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStageTblModel) Insert(ctx context.Context, data *StageTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, stageTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Description, data.Url, data.EventId, data.TimeStart, data.TimeEnd)
	return ret, err
}

func (m *defaultStageTblModel) Update(ctx context.Context, data *StageTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, stageTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Description, data.Url, data.EventId, data.TimeStart, data.TimeEnd)
	return err
}

func (m *defaultStageTblModel) tableName() string {
	return m.table
}
