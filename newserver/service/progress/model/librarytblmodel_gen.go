// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	libraryTblFieldNames          = builder.RawFieldNames(&LibraryTbl{}, true)
	libraryTblRows                = strings.Join(libraryTblFieldNames, ",")
	libraryTblRowsExpectAutoSet   = strings.Join(stringx.Remove(libraryTblFieldNames), ",")
	libraryTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(libraryTblFieldNames, "id"))
)

type (
	libraryTblModel interface {
		Insert(ctx context.Context, data *LibraryTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LibraryTbl, error)
		Update(ctx context.Context, data *LibraryTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLibraryTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LibraryTbl struct {
		Id      int64          `db:"id"`
		Name    string         `db:"name"`
		Url     sql.NullString `db:"url"`
		OwnerId int64          `db:"owner_id"`
	}
)

func newLibraryTblModel(conn sqlx.SqlConn) *defaultLibraryTblModel {
	return &defaultLibraryTblModel{
		conn:  conn,
		table: `"public"."library_tbl"`,
	}
}

func (m *defaultLibraryTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLibraryTblModel) FindOne(ctx context.Context, id int64) (*LibraryTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", libraryTblRows, m.table)
	var resp LibraryTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLibraryTblModel) Insert(ctx context.Context, data *LibraryTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, libraryTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Url, data.OwnerId)
	return ret, err
}

func (m *defaultLibraryTblModel) Update(ctx context.Context, data *LibraryTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, libraryTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Url, data.OwnerId)
	return err
}

func (m *defaultLibraryTblModel) tableName() string {
	return m.table
}
