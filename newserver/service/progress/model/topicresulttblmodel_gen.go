// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	topicResultTblFieldNames          = builder.RawFieldNames(&TopicResultTbl{}, true)
	topicResultTblRows                = strings.Join(topicResultTblFieldNames, ",")
	topicResultTblRowsExpectAutoSet   = strings.Join(stringx.Remove(topicResultTblFieldNames), ",")
	topicResultTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(topicResultTblFieldNames, "id"))
)

type (
	topicResultTblModel interface {
		Insert(ctx context.Context, data *TopicResultTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TopicResultTbl, error)
		Update(ctx context.Context, data *TopicResultTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTopicResultTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TopicResultTbl struct {
		Id          int64          `db:"id"`
		TopicId     int64          `db:"topic_id"`
		Description sql.NullString `db:"description"`
		ResultUrl   string         `db:"result_url"`
	}
)

func newTopicResultTblModel(conn sqlx.SqlConn) *defaultTopicResultTblModel {
	return &defaultTopicResultTblModel{
		conn:  conn,
		table: `"public"."topic_result_tbl"`,
	}
}

func (m *defaultTopicResultTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTopicResultTblModel) FindOne(ctx context.Context, id int64) (*TopicResultTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", topicResultTblRows, m.table)
	var resp TopicResultTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicResultTblModel) Insert(ctx context.Context, data *TopicResultTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, topicResultTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.TopicId, data.Description, data.ResultUrl)
	return ret, err
}

func (m *defaultTopicResultTblModel) Update(ctx context.Context, data *TopicResultTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, topicResultTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.TopicId, data.Description, data.ResultUrl)
	return err
}

func (m *defaultTopicResultTblModel) tableName() string {
	return m.table
}
