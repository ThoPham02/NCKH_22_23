// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	departmentTblFieldNames          = builder.RawFieldNames(&DepartmentTbl{}, true)
	departmentTblRows                = strings.Join(departmentTblFieldNames, ",")
	departmentTblRowsExpectAutoSet   = strings.Join(stringx.Remove(departmentTblFieldNames), ",")
	departmentTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(departmentTblFieldNames, "id"))
)

type (
	departmentTblModel interface {
		Insert(ctx context.Context, data *DepartmentTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DepartmentTbl, error)
		Update(ctx context.Context, data *DepartmentTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDepartmentTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DepartmentTbl struct {
		Id        int64  `db:"id"`
		Name      string `db:"name"`
		FacultyId int64  `db:"faculty_id"`
	}
)

func newDepartmentTblModel(conn sqlx.SqlConn) *defaultDepartmentTblModel {
	return &defaultDepartmentTblModel{
		conn:  conn,
		table: `"public"."department_tbl"`,
	}
}

func (m *defaultDepartmentTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDepartmentTblModel) FindOne(ctx context.Context, id int64) (*DepartmentTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", departmentTblRows, m.table)
	var resp DepartmentTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDepartmentTblModel) Insert(ctx context.Context, data *DepartmentTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, departmentTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.FacultyId)
	return ret, err
}

func (m *defaultDepartmentTblModel) Update(ctx context.Context, data *DepartmentTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, departmentTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.FacultyId)
	return err
}

func (m *defaultDepartmentTblModel) tableName() string {
	return m.table
}
