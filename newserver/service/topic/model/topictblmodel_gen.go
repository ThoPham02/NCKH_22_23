// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	topicTblFieldNames          = builder.RawFieldNames(&TopicTbl{}, true)
	topicTblRows                = strings.Join(topicTblFieldNames, ",")
	topicTblRowsExpectAutoSet   = strings.Join(stringx.Remove(topicTblFieldNames), ",")
	topicTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(topicTblFieldNames, "id"))
)

type (
	topicTblModel interface {
		Insert(ctx context.Context, data *TopicTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TopicTbl, error)
		Update(ctx context.Context, data *TopicTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTopicTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TopicTbl struct {
		Id             int64          `db:"id"`
		Name           string         `db:"name"`
		LectureId      int64          `db:"lecture_id"`
		DepartmentId   int64          `db:"department_id"`
		Status         int64          `db:"status"`
		EventId        int64          `db:"event_id"`
		SubcommitteeId sql.NullInt64  `db:"subcommittee_id"`
		ListStudents   sql.NullString `db:"list_students"`
		TimeStart      sql.NullInt64  `db:"time_start"`
		TimeEnd        sql.NullInt64  `db:"time_end"`
		CashSupport    sql.NullInt64  `db:"cash_support"`
	}
)

func newTopicTblModel(conn sqlx.SqlConn) *defaultTopicTblModel {
	return &defaultTopicTblModel{
		conn:  conn,
		table: `"public"."topic_tbl"`,
	}
}

func (m *defaultTopicTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTopicTblModel) FindOne(ctx context.Context, id int64) (*TopicTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", topicTblRows, m.table)
	var resp TopicTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicTblModel) Insert(ctx context.Context, data *TopicTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)", m.table, topicTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.LectureId, data.DepartmentId, data.Status, data.EventId, data.SubcommitteeId, data.ListStudents, data.TimeStart, data.TimeEnd, data.CashSupport)
	return ret, err
}

func (m *defaultTopicTblModel) Update(ctx context.Context, data *TopicTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, topicTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.LectureId, data.DepartmentId, data.Status, data.EventId, data.SubcommitteeId, data.ListStudents, data.TimeStart, data.TimeEnd, data.CashSupport)
	return err
}

func (m *defaultTopicTblModel) tableName() string {
	return m.table
}
