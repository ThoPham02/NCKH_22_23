// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	studentGroupTblFieldNames          = builder.RawFieldNames(&StudentGroupTbl{}, true)
	studentGroupTblRows                = strings.Join(studentGroupTblFieldNames, ",")
	studentGroupTblRowsExpectAutoSet   = strings.Join(stringx.Remove(studentGroupTblFieldNames), ",")
	studentGroupTblRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(studentGroupTblFieldNames, "id"))
)

type (
	studentGroupTblModel interface {
		Insert(ctx context.Context, data *StudentGroupTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StudentGroupTbl, error)
		Update(ctx context.Context, data *StudentGroupTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStudentGroupTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StudentGroupTbl struct {
		Id        int64 `db:"id"`
		EventId   int64 `db:"event_id"`
		StudentId int64 `db:"student_id"`
		GroupId   int64 `db:"group_id"`
	}
)

func newStudentGroupTblModel(conn sqlx.SqlConn) *defaultStudentGroupTblModel {
	return &defaultStudentGroupTblModel{
		conn:  conn,
		table: `"public"."student_group_tbl"`,
	}
}

func (m *defaultStudentGroupTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStudentGroupTblModel) FindOne(ctx context.Context, id int64) (*StudentGroupTbl, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", studentGroupTblRows, m.table)
	var resp StudentGroupTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentGroupTblModel) Insert(ctx context.Context, data *StudentGroupTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, studentGroupTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.EventId, data.StudentId, data.GroupId)
	return ret, err
}

func (m *defaultStudentGroupTblModel) Update(ctx context.Context, data *StudentGroupTbl) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, studentGroupTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.EventId, data.StudentId, data.GroupId)
	return err
}

func (m *defaultStudentGroupTblModel) tableName() string {
	return m.table
}
