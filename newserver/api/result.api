type (
	Result {
		Code    int64  `json:"code"`
		Message string `json:"message"`
	}

	Subcommittee {
		ID        int64  `json:"id"`
		Name      string `json:"name"`
		FacultyID int64  `json:"facultyID"`
		EventID   int64  `json:"eventID"`
	}

	Group {
		ID             int64 `json:"id"`
		SubcommitteeId int64 `json:"subcommitteeID"`
		LectureId      int64 `json:"lectureID"`
		Role           int64 `json:"role"`
	}

	TopicMark {
		ID        int64   `json:"id"`
		TopicID   int64   `json:"topicID"`
		LectureID int64   `json:"lectureID"`
		Point     float64 `json:"point"`
		Comment   string  `json:"comment"`
		Url       string  `json:"url"`
	}
)

type (
	GetSubcommitteesReq {
	}

	GetSubcommitteesRes {
		Result        Result         `json:"result"`
		Total         int64          `json:"total"`
		Subcommittees []Subcommittee `json:"subcommittees"`
	}
)

type (
	LectureGroup {
		LectureID int64 `json:"lectureID"`
		Role      int64 `json:"role"`
	}
	CreateSubcommitteeReq {
		Name         string         `json:"name"`
		ListLectures []LectureGroup `json:"listLectures"`
		FacultyID    int64          `json:"facultyID"`
		EventID      int64          `json:"eventID"`
	}
	CreateSubcommitteeRes {
		Result Result `json:"result"`
	}
)

type (
	GetTopicMarksReq {
	}
	GetTopicMarksRes {
		Result     Result      `json:"result"`
		Total      int64       `json:"total"`
		TopicMarks []TopicMark `json:"topicMarks"`
	}
)

type (
	CreateTopicMarkReq {
		TopicID   int64   `json:"topicID"`
		LectureID int64   `json:"lectureID"`
		Point     float64 `json:"point"`
		Comment   string  `json:"comment"`
		Url       string  `json:"url"`
	}

	CreateTopicMarkRes {
		Result Result `json:"result"`
	}
)

service result-api {
	
	@handler GetSubcommitteeHandler
	get /api/subcommittees (GetSubcommitteesReq) returns(GetSubcommitteesRes)
	
	@handler CreateSubcommitteeHandler
	post /api/subcommittee (CreateSubcommitteeReq) returns(CreateSubcommitteeRes)
	
	@handler GetTopicMarksHandler
	get /api/topic-marks (GetTopicMarksReq) returns(GetTopicMarksRes)
	
	@handler CreateTopicMarkHandler
	post /api/topic-mark (CreateTopicMarkReq) returns(CreateTopicMarkRes)
}